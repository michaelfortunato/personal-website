#!/usr/bin/python3

import subprocess
import sys

## This hook is called with the following parameters:
print("Running pre-commit hook...")

result = subprocess.run(["git", "diff", "--staged", "--name-status"], capture_output=True, text=True)
lines = result.stdout.splitlines()
staged_files = []
for line in lines:
    parts = line.split()
    if parts[0][0] == 'R':
        name = parts[2]
    else:
        name = parts[1]
    status = parts[0]
    if status != 'D':
        if name != 'pages/blog/index.tsx':
            staged_files.append(name)

# TODO: Cannot get ANSI escape codes to be emmited. No colors :((
result = subprocess.run(["npm", "run", "format:check", "--"] + staged_files, capture_output=True, text=True)
if result.returncode != 0:
  print("Run prettier on the below files or add them to .prettier ignore before commiting:")
  print(result.stdout)
  print(result.stderr, file=sys.stderr)
  exit(1)

print("Good format.")

# TODO: Cannot get ANSI escape codes to be emmited. No colors :((
result = subprocess.run(["npm", "run", "lint"], capture_output=True, text=True)
if result.returncode != 0:
  print("Linting failed on the below files or add them to .eslintignore before commiting:")
  print(result.stdout)
  print(result.stderr, file=sys.stderr)
  exit(1)

print("Good lint.")

exit(0)

# #!/bin/sh
# #
# # An example hook script to verify what is about to be committed.
# # Called by "git commit" with no arguments.  The hook should
# # exit with non-zero status after issuing an appropriate message if
# # it wants to stop the commit.
# #
# # To enable this hook, rename this file to "pre-commit".
# 
# if git rev-parse --verify HEAD >/dev/null 2>&1
# then
# 	against=HEAD
# else
# 	# Initial commit: diff against an empty tree object
# 	against=$(git hash-object -t tree /dev/null)
# fi
# 
# # If you want to allow non-ASCII filenames set this variable to true.
# allownonascii=$(git config --type=bool hooks.allownonascii)
# 
# # Redirect output to stderr.
# exec 1>&2
# 
# # Cross platform projects tend to avoid non-ASCII filenames; prevent
# # them from being added to the repository. We exploit the fact that the
# # printable range starts at the space character and ends with tilde.
# if [ "$allownonascii" != "true" ] &&
# 	# Note that the use of brackets around a tr range is ok here, (it's
# 	# even required, for portability to Solaris 10's /usr/bin/tr), since
# 	# the square bracket bytes happen to fall in the designated range.
# 	test $(git diff --cached --name-only --diff-filter=A -z $against |
# 	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
# then
# 	cat <<\EOF
# Error: Attempt to add a non-ASCII file name.
# 
# This can cause problems if you want to work with people on other platforms.
# 
# To be portable it is advisable to rename the file.
# 
# If you know what you are doing you can disable this check using:
# 
#   git config hooks.allownonascii true
# EOF
# 	exit 1
# fi
# 
# # If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached $against --
