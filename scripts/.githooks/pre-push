#!/usr/bin/python3

import subprocess
import sys

remote = sys.argv[1]
url = sys.argv[2]

## This hook is called with the following parameters:
##
## $1 -- Name of the remote to which the push is being done
## $2 -- URL to which the push is being done
print("Running pre-push hook...")
# The stdin will receive the local ref, local oid, remote ref, and remote oid
try:
    while True:
        line = input()
        local_ref, local_oid, remote_ref, remote_oid = line.strip().split(' ')
        if local_ref == "refs/heads/main" or local_ref == "refs/heads/dev":
            result = subprocess.run(["npm", "run", "build"], capture_output=True, text=True)
            if result.returncode != 0:
                print(result.stdout)
                print(result.stderr, file=sys.stderr)
            exit(result.returncode)
        else:
            exit(0)
except EOFError:
    pass
exit(0)

##!/bin/sh
# The equivalent script in bash, I think
## An example hook script to verify what is about to be pushed.  Called by "git
## push" after it has checked the remote status, but before anything has been
## pushed.  If this script exits with a non-zero status nothing will be pushed.
##
## This hook is called with the following parameters:
##
## $1 -- Name of the remote to which the push is being done
## $2 -- URL to which the push is being done
##
## If pushing without using a named remote those arguments will be equal.
##
## Information about the commits which are being pushed is supplied as lines to
## the standard input in the form:
##
##   <local ref> <local oid> <remote ref> <remote oid>
##
## This sample shows how to prevent push of commits where the log message starts
## with "WIP" (work in progress).
#
#remote="$1"
#url="$2"
#
#while read local_ref local_oid remote_ref remote_oid; do
#	if test "$local_ref" = "refs/heads/main" -o "$local_ref" = "refs/heads/dev"; then
#		echo "got here, good"
#		hi=$(npm run build)
#		build_status=$?
#		echo "$build_status"
#		if test $build_status -ne 0; then
#			echo "$?"
#			echo >&2 "Build unsuccessful."
#		fi
#		exit 1
#	else
#		exit 1
#	fi
#done
#echo "got here, no good"
#
#exit 0
